import { useState, useEffect } from "react";
import { useProject } from "@/context/ProjectContext";
import { 
  useTestCycles, 
  useCreateTestCycle, 
  useUpdateTestCycle,
  useTestCycleItems,
  useAddTestCasesToCycle,
  useAddTestSuiteToCycle,
  useRemoveTestCaseFromCycle,
  useUpdateTestCycleItem,
  useCreateTestRun,
  useTestRuns,
  useTestRunsByTestCase,
  TestCycle,
  TestCycleItem,
  TestRun
} from "@/hooks/test-execution";
import { useTestCases, useTestSuites, TestCase, TestSuite } from "@/hooks/test-management";
import { useToast } from "@/hooks/use-toast";
import { 
  PageContainer, 
  PageHeader, 
  PageContent 
} from "@/components/design-system/page-container";
import { ATMFCard, ATMFCardHeader } from "@/components/design-system/atmf-card";
import { Button } from "@/components/ui/button";
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogClose
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from "@/components/ui/table";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { TabView } from "@/components/design-system/tab-view";
import {
  PlayCircle,
  Calendar,
  Plus,
  Check,
  X,
  SkipForward,
  AlertCircle,
  Clock,
  ListChecks,
  Trash2
} from "lucide-react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { StatusBadge, type StatusBadgeVariant } from "@/components/design-system/status-badge";

// Schema for creating a test cycle
const testCycleSchema = z.object({
  name: z.string().min(1, "Name is required"),
  description: z.string().optional(),
  status: z.string().default("created"),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
});

// Test Execution Page
export default function TestExecution() {
  const { toast } = useToast();
  const { selectedProject } = useProject();
  const projectId = selectedProject?.id;
  
  // State
  const [selectedCycle, setSelectedCycle] = useState<TestCycle | null>(null);
  const [activeTab, setActiveTab] = useState("cycles");
  const [newCycleDialogOpen, setNewCycleDialogOpen] = useState(false);
  const [editCycleDialogOpen, setEditCycleDialogOpen] = useState(false);
  const [selectCasesDialogOpen, setSelectCasesDialogOpen] = useState(false);
  const [selectSuiteDialogOpen, setSelectSuiteDialogOpen] = useState(false);
  const [testRunDialogOpen, setTestRunDialogOpen] = useState(false);
  const [historyDialogOpen, setHistoryDialogOpen] = useState(false);
  const [selectedCases, setSelectedCases] = useState<number[]>([]);
  const [selectedSuiteId, setSelectedSuiteId] = useState<number | null>(null);
  const [selectedCycleItem, setSelectedCycleItem] = useState<TestCycleItem | null>(null);
  const [selectedTestCaseId, setSelectedTestCaseId] = useState<number | null>(null);
  const [testRunNotes, setTestRunNotes] = useState("");
  
  // Forms
  const newCycleForm = useForm<z.infer<typeof testCycleSchema>>({
    resolver: zodResolver(testCycleSchema),
    defaultValues: {
      name: "",
      description: "",
      status: "created"
    },
  });
  
  const editCycleForm = useForm<z.infer<typeof testCycleSchema>>({
    resolver: zodResolver(testCycleSchema),
    defaultValues: {
      name: "",
      description: "",
      status: "created"
    },
  });
  
  // Queries
  const { data: testCycles, isLoading: isLoadingCycles } = useTestCycles(projectId);
  const { data: cycleItems, isLoading: isLoadingItems } = useTestCycleItems(selectedCycle?.id || 0);
  const { data: runs, isLoading: isLoadingRuns } = useTestRuns(selectedCycleItem?.id || 0);
  const { data: testRunHistory, isLoading: isLoadingHistory } = useTestRunsByTestCase(selectedTestCaseId || 0);
  const { testCases, isLoading: isLoadingCases } = useTestCases({
    projectId,
  });
  const { testSuites, isLoading: isLoadingSuites } = useTestSuites({
    projectId,
  });
  
  // Mutations
  const createCycleMutation = useCreateTestCycle();
  const updateCycleMutation = useUpdateTestCycle(selectedCycle?.id || 0);
  const addCasesMutation = useAddTestCasesToCycle();
  const addSuiteMutation = useAddTestSuiteToCycle();
  const removeTestCaseMutation = useRemoveTestCaseFromCycle();
  const updateItemMutation = useUpdateTestCycleItem(selectedCycleItem?.id || 0);
  const createRunMutation = useCreateTestRun();
  
  // Handlers
  const handleCreateCycle = (data: z.infer<typeof testCycleSchema>) => {
    if (!projectId) return;
    
    // Convert string dates to Date objects
    const payload = {
      ...data,
      projectId,
      startDate: data.startDate ? new Date(data.startDate) : undefined,
      endDate: data.endDate ? new Date(data.endDate) : undefined
    };
    
    createCycleMutation.mutate(payload, {
      onSuccess: (newCycle) => {
        toast({
          title: "Test Cycle Created",
          description: `"${newCycle.name}" has been created successfully.`,
        });
        setNewCycleDialogOpen(false);
        newCycleForm.reset();
        setSelectedCycle(newCycle);
        setActiveTab("execution");
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: "Failed to create test cycle. Please try again.",
          variant: "destructive",
        });
      }
    });
  };
  
  const handleAddCases = () => {
    if (!selectedCycle || selectedCases.length === 0) return;
    
    addCasesMutation.mutate({
      cycleId: selectedCycle.id,
      testCaseIds: selectedCases
    }, {
      onSuccess: () => {
        toast({
          title: "Test Cases Added",
          description: `${selectedCases.length} test cases added to cycle.`,
        });
        setSelectCasesDialogOpen(false);
        setSelectedCases([]);
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: "Failed to add test cases. Please try again.",
          variant: "destructive",
        });
      }
    });
  };
  
  const handleAddSuite = () => {
    if (!selectedCycle || !selectedSuiteId) return;
    
    addSuiteMutation.mutate({
      cycleId: selectedCycle.id,
      suiteId: selectedSuiteId
    }, {
      onSuccess: (result) => {
        toast({
          title: "Test Suite Added",
          description: `Test suite with ${result.length} test cases added to cycle.`,
        });
        setSelectSuiteDialogOpen(false);
        setSelectedSuiteId(null);
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: "Failed to add test suite. Please try again.",
          variant: "destructive",
        });
      }
    });
  };
  
  const handleRunTest = (status: string) => {
    if (!selectedCycleItem) return;
    
    createRunMutation.mutate({
      cycleItemId: selectedCycleItem.id,
      status,
      notes: testRunNotes || `Test ${status} - executed manually`,
      executedAt: new Date().toISOString(),
    }, {
      onSuccess: () => {
        toast({
          title: "Test Executed",
          description: `Test status updated to ${status}.`,
        });
        setTestRunDialogOpen(false);
        setTestRunNotes(""); // Reset notes for next execution
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: "Failed to execute test. Please try again.",
          variant: "destructive",
        });
      }
    });
  };
  
  const handleEditCycle = (data: z.infer<typeof testCycleSchema>) => {
    if (!selectedCycle) return;
    
    // Convert string dates to Date objects
    const payload = {
      ...data,
      startDate: data.startDate ? new Date(data.startDate) : undefined,
      endDate: data.endDate ? new Date(data.endDate) : undefined
    };
    
    // Execute the mutation directly
    updateCycleMutation.mutate(payload, {
      onSuccess: (updatedCycle: any) => {
        toast({
          title: "Test Cycle Updated",
          description: `"${updatedCycle.name}" has been updated successfully.`,
        });
        setEditCycleDialogOpen(false);
        setSelectedCycle(updatedCycle);
      },
      onError: (error: any) => {
        toast({
          title: "Error",
          description: "Failed to update test cycle. Please try again.",
          variant: "destructive",
        });
      }
    });
  };
  
  const handleRemoveTestCase = (item: TestCycleItem) => {
    if (!selectedCycle) return;
    
    removeTestCaseMutation.mutate({
      itemId: item.id,
      cycleId: selectedCycle.id
    }, {
      onSuccess: () => {
        toast({
          title: "Test Case Removed",
          description: "Test case has been removed from the cycle successfully.",
        });
      },
      onError: (error) => {
        toast({
          title: "Error",
          description: "Failed to remove test case from cycle. Please try again.",
          variant: "destructive",
        });
      }
    });
  };
  
  // Effect to auto-select first cycle if none selected
  useEffect(() => {
    if (testCycles && testCycles.length > 0 && !selectedCycle) {
      setSelectedCycle(testCycles[0]);
    }
  }, [testCycles, selectedCycle]);
  
  // Effect to populate edit form when a cycle is selected for editing
  useEffect(() => {
    if (selectedCycle && editCycleDialogOpen) {
      editCycleForm.reset({
        name: selectedCycle.name,
        description: selectedCycle.description || "",
        status: selectedCycle.status || "created",
        startDate: selectedCycle.startDate 
          ? new Date(selectedCycle.startDate).toISOString().split('T')[0] 
          : undefined,
        endDate: selectedCycle.endDate 
          ? new Date(selectedCycle.endDate).toISOString().split('T')[0] 
          : undefined,
      });
    }
  }, [selectedCycle, editCycleDialogOpen]);
  
  // Render status badge
  const renderStatusBadge = (status: string | null) => {
    if (!status) return <StatusBadge variant="muted">Unknown</StatusBadge>;
    
    const statusMap: Record<string, { variant: StatusBadgeVariant, label: string }> = {
      "not-run": { variant: "muted", label: "Not Run" },
      "pass": { variant: "success", label: "Pass" },
      "fail": { variant: "danger", label: "Fail" },
      "skip": { variant: "warning", label: "Skipped" },
      "blocked": { variant: "danger", label: "Blocked" },
      "in-progress": { variant: "blue", label: "In Progress" },
      "created": { variant: "blue", label: "Created" },
      "completed": { variant: "success", label: "Completed" },
    };
    
    const statusInfo = statusMap[status] || { variant: "muted", label: status };
    
    return (
      <StatusBadge variant={statusInfo.variant}>
        {statusInfo.label}
      </StatusBadge>
    );
  };
  
  // Get associated test case details
  const getTestCaseDetails = (testCaseId: number): TestCase | undefined => {
    return testCases?.find(tc => tc.id === testCaseId);
  };

  return (
    <PageContainer withPadding className="py-8">
      <PageHeader
        title="Test Execution"
        description="Execute test cases and manage test cycles"
        actions={
          <Button className="flex items-center gap-2" onClick={() => setNewCycleDialogOpen(true)}>
            <Plus size={16} />
            <span>New Test Cycle</span>
          </Button>
        }
      />
      
      <PageContent>
        {/* TabView Component for better UI consistency */}
        {(() => {
          const tabItems = [
            {
              id: "cycles",
              label: "Test Cycles",
              content: (
                <div className="space-y-6">
                  <ATMFCard>
                    <ATMFCardHeader title="All Test Cycles" />
                    
                    <div className="p-6">
                      {isLoadingCycles ? (
                        <div className="text-center py-8">Loading test cycles...</div>
                      ) : testCycles && testCycles.length > 0 ? (
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Name</TableHead>
                              <TableHead>Status</TableHead>
                              <TableHead>Start Date</TableHead>
                              <TableHead>End Date</TableHead>
                              <TableHead>Progress</TableHead>
                              <TableHead className="text-right">Actions</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {testCycles.map((cycle) => (
                              <TableRow 
                                key={cycle.id}
                                className={selectedCycle?.id === cycle.id ? "bg-primary/5" : ""}
                                onClick={() => setSelectedCycle(cycle)}
                              >
                                <TableCell className="font-medium">{cycle.name}</TableCell>
                                <TableCell>{renderStatusBadge(cycle.status)}</TableCell>
                                <TableCell>{cycle.startDate ? new Date(cycle.startDate).toLocaleDateString() : "Not started"}</TableCell>
                                <TableCell>{cycle.endDate ? new Date(cycle.endDate).toLocaleDateString() : "No end date"}</TableCell>
                                <TableCell>-</TableCell>
                                <TableCell className="text-right">
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      setSelectedCycle(cycle);
                                      setActiveTab("execution");
                                    }}
                                  >
                                    <PlayCircle size={16} className="mr-2" />
                                    Execute
                                  </Button>
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      ) : (
                        <div className="text-center py-8 text-muted-foreground">
                          No test cycles found. Create a new test cycle to get started.
                        </div>
                      )}
                    </div>
                  </ATMFCard>
                </div>
              )
            },
            {
              id: "execution",
              label: "Test Execution",
              content: selectedCycle ? (
                <div className="space-y-6">
                  {/* Display the selected cycle's details */}
                </div>
              ) : (
                <div className="flex items-center justify-center p-12 border border-dashed rounded-lg">
                  <div className="text-center">
                    <AlertCircle className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
                    <h3 className="text-lg font-medium mb-2">No Test Cycle Selected</h3>
                    <p className="text-muted-foreground mb-4">Please select a test cycle to view execution details.</p>
                    <Button variant="outline" onClick={() => setActiveTab("cycles")}>View Test Cycles</Button>
                  </div>
                </div>
              )
            }
          ];
          
          return (
            <TabView 
              tabs={tabItems} 
              activeTab={activeTab} 
              onChange={setActiveTab} 
              variant="underline"
            />
          );
        })()}
        
        {/* Original Tabs - Will enable when TabView is working properly */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6 hidden">
          <TabsList className="grid grid-cols-2 w-[400px]">
            <TabsTrigger value="cycles">Test Cycles</TabsTrigger>
            <TabsTrigger value="execution" disabled={!selectedCycle}>Test Execution</TabsTrigger>
          </TabsList>
                
                <div className="p-6">
                  {isLoadingCycles ? (
                    <div className="text-center py-8">Loading test cycles...</div>
                  ) : testCycles && testCycles.length > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Name</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Start Date</TableHead>
                          <TableHead>End Date</TableHead>
                          <TableHead>Progress</TableHead>
                          <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {testCycles.map((cycle) => (
                          <TableRow 
                            key={cycle.id}
                            className={selectedCycle?.id === cycle.id ? "bg-primary/5" : ""}
                            onClick={() => setSelectedCycle(cycle)}
                          >
                            <TableCell className="font-medium">{cycle.name}</TableCell>
                            <TableCell>{renderStatusBadge(cycle.status)}</TableCell>
                            <TableCell>{cycle.startDate ? new Date(cycle.startDate).toLocaleDateString() : "Not started"}</TableCell>
                            <TableCell>{cycle.endDate ? new Date(cycle.endDate).toLocaleDateString() : "No end date"}</TableCell>
                            <TableCell>-</TableCell>
                            <TableCell className="text-right">
                              <Button 
                                variant="ghost" 
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  setSelectedCycle(cycle);
                                  setActiveTab("execution");
                                }}
                              >
                                <PlayCircle size={16} className="mr-2" />
                                Execute
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  ) : (
                    <div className="text-center py-8 text-muted-foreground">
                      No test cycles found. Create a new test cycle to get started.
                    </div>
                  )}
                </div>
              </ATMFCard>
            </div>
          );
          
          // Execution tab content
          const executionContent = selectedCycle ? (
            <div className="space-y-6">
              <ATMFCard>
                <ATMFCardHeader 
                  title={selectedCycle.name} 
                  description={selectedCycle.description || "No description"} 
                  action={
                    <div className="flex space-x-2">
                      <Button
                        variant="outline"
                        onClick={() => setEditCycleDialogOpen(true)}
                      >
                        <Calendar size={16} className="mr-2" />
                        Edit Cycle
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => setSelectSuiteDialogOpen(true)}
                      >
                        <ListChecks size={16} className="mr-2" />
                        Add Test Suite
                      </Button>
                      <Button
                        variant="outline"
                        onClick={() => setSelectCasesDialogOpen(true)}
                      >
                        <Plus size={16} className="mr-2" />
                        Add Test Cases
                      </Button>
                    </div>
                  }
                />
                
                <div className="p-6 grid grid-cols-4 gap-6 bg-atmf-card/30">
                  <div className="p-4 bg-atmf-card rounded-lg">
                    <span className="text-sm text-muted-foreground">Status</span>
                    <div className="mt-1">{renderStatusBadge(selectedCycle.status)}</div>
                  </div>
                  
                  <div className="p-4 bg-atmf-card rounded-lg">
                    <span className="text-sm text-muted-foreground">Created</span>
                    <div className="mt-1">
                      {selectedCycle.createdAt ? new Date(selectedCycle.createdAt).toLocaleDateString() : "Unknown"}
                    </div>
                  </div>
                  
                  <div className="p-4 bg-atmf-card rounded-lg">
                    <span className="text-sm text-muted-foreground">Start Date</span>
                    <div className="mt-1">
                      {selectedCycle.startDate ? new Date(selectedCycle.startDate).toLocaleDateString() : "Not set"}
                    </div>
                  </div>
                  
                  <div className="p-4 bg-atmf-card rounded-lg">
                    <span className="text-sm text-muted-foreground">End Date</span>
                    <div className="mt-1">
                      {selectedCycle.endDate ? new Date(selectedCycle.endDate).toLocaleDateString() : "Not set"}
                    </div>
                  </div>
                </div>
              </ATMFCard>
              
              <ATMFCard>
                <ATMFCardHeader title="Test Cases" description="Execute test cases in this cycle" />
                
                <div className="p-6">
                  {isLoadingItems ? (
                    <div className="text-center py-8">Loading test cases...</div>
                  ) : cycleItems && cycleItems.length > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>ID</TableHead>
                          <TableHead>Test Case</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Last Executed</TableHead>
                          <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {cycleItems.map((item) => {
                          const testCase = getTestCaseDetails(item.testCaseId);
                          return (
                            <TableRow key={item.id}>
                              <TableCell className="font-mono">{item.testCaseId}</TableCell>
                              <TableCell>{testCase?.title || `Test Case #${item.testCaseId}`}</TableCell>
                              <TableCell>{renderStatusBadge(item.status)}</TableCell>
                              <TableCell>{item.updatedAt ? new Date(item.updatedAt).toLocaleString() : "Never"}</TableCell>
                              <TableCell className="text-right space-x-2">
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => {
                                    setSelectedCycleItem(item);
                                    setSelectedTestCaseId(item.testCaseId);
                                    setTestRunDialogOpen(true);
                                  }}
                                >
                                  <PlayCircle size={16} className="mr-2" />
                                  Execute
                                </Button>
                                <Button 
                                  variant="outline" 
                                  size="sm"
                                  onClick={() => {
                                    setSelectedTestCaseId(item.testCaseId);
                                    setHistoryDialogOpen(true);
                                  }}
                                >
                                  <Clock size={16} className="mr-2" />
                                  History
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  className="text-red-500 hover:text-red-700 hover:bg-red-100/20"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleRemoveTestCase(item);
                                  }}
                                >
                                  <Trash2 size={16} />
                                </Button>
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      </TableBody>
                    </Table>
                  ) : (
                    <div className="text-center py-8 text-muted-foreground">
                      No test cases in this cycle. Add test cases to start execution.
                    </div>
                  )}
                </div>
              </ATMFCard>
            </div>
          ) : (
            <div className="flex items-center justify-center p-12 border border-dashed rounded-lg">
              <div className="text-center">
                <AlertCircle className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
                <h3 className="text-lg font-medium mb-2">No Test Cycle Selected</h3>
                <p className="text-muted-foreground mb-4">Please select a test cycle to view execution details.</p>
                <Button variant="outline" onClick={() => setActiveTab("cycles")}>View Test Cycles</Button>
              </div>
            </div>
          );
          
          // Define tabs for TabView
          const tabs = [
            { id: "cycles", label: "Test Cycles", content: cyclesContent },
            { id: "execution", label: "Test Execution", content: executionContent }
          ];
          
          return (
            <TabView 
              tabs={tabs} 
              activeTab={activeTab} 
              onChange={setActiveTab} 
              variant="underline"
            />
          );
        })()}
        
        {/* Original tabs component that will be replaced */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6 hidden">
          <TabsList className="grid grid-cols-2 w-[400px]">
            <TabsTrigger value="cycles">Test Cycles</TabsTrigger>
            <TabsTrigger value="execution" disabled={!selectedCycle}>Test Execution</TabsTrigger>
          </TabsList>
          
          {/* Test Cycles Tab */}
          <TabsContent value="cycles" className="space-y-6">
            <ATMFCard>
              <ATMFCardHeader title="All Test Cycles" />
              
              <div className="p-6">
                {isLoadingCycles ? (
                  <div className="text-center py-8">Loading test cycles...</div>
                ) : testCycles && testCycles.length > 0 ? (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Name</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Start Date</TableHead>
                        <TableHead>End Date</TableHead>
                        <TableHead>Progress</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {testCycles.map((cycle) => (
                        <TableRow 
                          key={cycle.id}
                          className={selectedCycle?.id === cycle.id ? "bg-primary/5" : ""}
                          onClick={() => setSelectedCycle(cycle)}
                        >
                          <TableCell className="font-medium">{cycle.name}</TableCell>
                          <TableCell>{renderStatusBadge(cycle.status)}</TableCell>
                          <TableCell>{cycle.startDate ? new Date(cycle.startDate).toLocaleDateString() : "Not started"}</TableCell>
                          <TableCell>{cycle.endDate ? new Date(cycle.endDate).toLocaleDateString() : "No end date"}</TableCell>
                          <TableCell>-</TableCell>
                          <TableCell className="text-right">
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation();
                                setSelectedCycle(cycle);
                                setActiveTab("execution");
                              }}
                            >
                              <PlayCircle size={16} className="mr-2" />
                              Execute
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    No test cycles found. Create a new test cycle to get started.
                  </div>
                )}
              </div>
            </ATMFCard>
          </TabsContent>
          
          {/* Test Execution Tab */}
          <TabsContent value="execution" className="space-y-6">
            <ATMFCard>
              <ATMFCardHeader title="All Test Cycles" />
              
              <div className="p-6">
                {isLoadingCycles ? (
                  <div className="text-center py-8">Loading test cycles...</div>
                ) : testCycles && testCycles.length > 0 ? (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Name</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Start Date</TableHead>
                        <TableHead>End Date</TableHead>
                        <TableHead>Progress</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {testCycles.map((cycle) => (
                        <TableRow 
                          key={cycle.id}
                          className={selectedCycle?.id === cycle.id ? "bg-primary/5" : ""}
                          onClick={() => setSelectedCycle(cycle)}
                        >
                          <TableCell className="font-medium">{cycle.name}</TableCell>
                          <TableCell>{renderStatusBadge(cycle.status)}</TableCell>
                          <TableCell>{cycle.startDate ? new Date(cycle.startDate).toLocaleDateString() : "Not started"}</TableCell>
                          <TableCell>{cycle.endDate ? new Date(cycle.endDate).toLocaleDateString() : "No end date"}</TableCell>
                          <TableCell>-</TableCell>
                          <TableCell className="text-right">
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation();
                                setSelectedCycle(cycle);
                                setActiveTab("execution");
                              }}
                            >
                              <PlayCircle size={16} className="mr-2" />
                              Execute
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    No test cycles found. Create a new test cycle to get started.
                  </div>
                )}
              </div>
            </ATMFCard>
          </TabsContent>
          
          {/* Test Execution Tab */}
          <TabsContent value="execution" className="space-y-6">
            {selectedCycle && (
              <>
                <ATMFCard>
                  <ATMFCardHeader 
                    title={selectedCycle.name} 
                    description={selectedCycle.description || "No description"} 
                    action={
                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          onClick={() => setEditCycleDialogOpen(true)}
                        >
                          <Calendar size={16} className="mr-2" />
                          Edit Cycle
                        </Button>
                        <Button
                          variant="outline"
                          onClick={() => setSelectSuiteDialogOpen(true)}
                        >
                          <ListChecks size={16} className="mr-2" />
                          Add Test Suite
                        </Button>
                        <Button
                          variant="outline"
                          onClick={() => setSelectCasesDialogOpen(true)}
                        >
                          <Plus size={16} className="mr-2" />
                          Add Test Cases
                        </Button>
                      </div>
                    }
                  />
                  
                  <div className="p-6 grid grid-cols-4 gap-6 bg-atmf-card/30">
                    <div className="p-4 bg-atmf-card rounded-lg">
                      <span className="text-sm text-muted-foreground">Status</span>
                      <div className="mt-1">{renderStatusBadge(selectedCycle.status)}</div>
                    </div>
                    
                    <div className="p-4 bg-atmf-card rounded-lg">
                      <span className="text-sm text-muted-foreground">Created</span>
                      <div className="mt-1">
                        {selectedCycle.createdAt ? new Date(selectedCycle.createdAt).toLocaleDateString() : "Unknown"}
                      </div>
                    </div>
                    
                    <div className="p-4 bg-atmf-card rounded-lg">
                      <span className="text-sm text-muted-foreground">Start Date</span>
                      <div className="mt-1">
                        {selectedCycle.startDate ? new Date(selectedCycle.startDate).toLocaleDateString() : "Not set"}
                      </div>
                    </div>
                    
                    <div className="p-4 bg-atmf-card rounded-lg">
                      <span className="text-sm text-muted-foreground">End Date</span>
                      <div className="mt-1">
                        {selectedCycle.endDate ? new Date(selectedCycle.endDate).toLocaleDateString() : "Not set"}
                      </div>
                    </div>
                  </div>
                </ATMFCard>
                
                <ATMFCard>
                  <ATMFCardHeader title="Test Cases" description="Execute test cases in this cycle" />
                  
                  <div className="p-6">
                    {isLoadingItems ? (
                      <div className="text-center py-8">Loading test cases...</div>
                    ) : cycleItems && cycleItems.length > 0 ? (
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>ID</TableHead>
                            <TableHead>Test Case</TableHead>
                            <TableHead>Status</TableHead>
                            <TableHead>Last Executed</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {cycleItems.map((item) => {
                            const testCase = getTestCaseDetails(item.testCaseId);
                            return (
                              <TableRow key={item.id}>
                                <TableCell className="font-mono">{item.testCaseId}</TableCell>
                                <TableCell>{testCase?.title || `Test Case #${item.testCaseId}`}</TableCell>
                                <TableCell>{renderStatusBadge(item.status)}</TableCell>
                                <TableCell>{item.updatedAt ? new Date(item.updatedAt).toLocaleString() : "Never"}</TableCell>
                                <TableCell className="text-right space-x-2">
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => {
                                      setSelectedCycleItem(item);
                                      setSelectedTestCaseId(item.testCaseId);
                                      setTestRunDialogOpen(true);
                                    }}
                                  >
                                    <PlayCircle size={16} className="mr-2" />
                                    Execute
                                  </Button>
                                  <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => {
                                      setSelectedTestCaseId(item.testCaseId);
                                      setHistoryDialogOpen(true);
                                    }}
                                  >
                                    <Clock size={16} className="mr-2" />
                                    History
                                  </Button>
                                  <Button 
                                    variant="ghost" 
                                    size="sm"
                                    className="text-red-500 hover:text-red-700 hover:bg-red-100/20"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleRemoveTestCase(item);
                                    }}
                                  >
                                    <Trash2 size={16} />
                                  </Button>
                                </TableCell>
                              </TableRow>
                            );
                          })}
                        </TableBody>
                      </Table>
                    ) : (
                      <div className="text-center py-8 text-muted-foreground">
                        No test cases in this cycle. Add test cases to start execution.
                      </div>
                    )}
                  </div>
                </ATMFCard>
              </>
            )}
          </TabsContent>
        </Tabs>
      </PageContent>
      
      {/* Create New Test Cycle Dialog */}
      <Dialog open={newCycleDialogOpen} onOpenChange={setNewCycleDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Test Cycle</DialogTitle>
            <DialogDescription>
              Create a new test cycle to organize and execute your test cases.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...newCycleForm}>
            <form onSubmit={newCycleForm.handleSubmit(handleCreateCycle)} className="space-y-4">
              <FormField
                control={newCycleForm.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Sprint 23 Regression" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={newCycleForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Test cycle description..." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={newCycleForm.control}
                  name="startDate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Start Date</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={newCycleForm.control}
                  name="endDate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>End Date</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={newCycleForm.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Status</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select status" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="created">Created</SelectItem>
                        <SelectItem value="in-progress">In Progress</SelectItem>
                        <SelectItem value="completed">Completed</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button type="submit" disabled={createCycleMutation.isPending}>
                  {createCycleMutation.isPending ? "Creating..." : "Create Test Cycle"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* Edit Test Cycle Dialog */}
      <Dialog open={editCycleDialogOpen} onOpenChange={setEditCycleDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Test Cycle</DialogTitle>
            <DialogDescription>
              Update the details of this test cycle.
            </DialogDescription>
          </DialogHeader>
          
          <Form {...editCycleForm}>
            <form onSubmit={editCycleForm.handleSubmit(handleEditCycle)} className="space-y-4">
              <FormField
                control={editCycleForm.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Sprint 23 Regression" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={editCycleForm.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea placeholder="Test cycle description..." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={editCycleForm.control}
                  name="startDate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Start Date</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={editCycleForm.control}
                  name="endDate"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>End Date</FormLabel>
                      <FormControl>
                        <Input type="date" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              
              <FormField
                control={editCycleForm.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Status</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select status" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="created">Created</SelectItem>
                        <SelectItem value="in-progress">In Progress</SelectItem>
                        <SelectItem value="completed">Completed</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button type="submit">
                  Update Test Cycle
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      
      {/* Select Test Cases Dialog */}
      <Dialog open={selectCasesDialogOpen} onOpenChange={setSelectCasesDialogOpen}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>Add Test Cases to Cycle</DialogTitle>
            <DialogDescription>
              Select test cases to add to the current test cycle.
            </DialogDescription>
          </DialogHeader>
          
          <div className="max-h-[400px] overflow-y-auto">
            {isLoadingCases ? (
              <div className="text-center py-8">Loading test cases...</div>
            ) : testCases && testCases.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-12">
                      <span className="sr-only">Select</span>
                    </TableHead>
                    <TableHead>ID</TableHead>
                    <TableHead>Title</TableHead>
                    <TableHead>Priority</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {testCases.map((testCase) => (
                    <TableRow key={testCase.id}>
                      <TableCell>
                        <input
                          type="checkbox"
                          className="w-4 h-4"
                          checked={selectedCases.includes(testCase.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedCases([...selectedCases, testCase.id]);
                            } else {
                              setSelectedCases(selectedCases.filter(id => id !== testCase.id));
                            }
                          }}
                        />
                      </TableCell>
                      <TableCell className="font-mono">{testCase.id}</TableCell>
                      <TableCell>{testCase.title}</TableCell>
                      <TableCell>
                        <StatusBadge variant={
                          testCase.priority === "high" ? "danger" :
                          testCase.priority === "medium" ? "warning" : "muted"
                        }>
                          {testCase.priority.charAt(0).toUpperCase() + testCase.priority.slice(1)}
                        </StatusBadge>
                      </TableCell>
                      <TableCell>
                        <StatusBadge variant={
                          testCase.status === "passed" ? "success" :
                          testCase.status === "failed" ? "danger" : "muted"
                        }>
                          {testCase.status.charAt(0).toUpperCase() + testCase.status.slice(1)}
                        </StatusBadge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                No test cases available to add.
              </div>
            )}
          </div>
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setSelectCasesDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddCases}
              disabled={selectedCases.length === 0 || addCasesMutation.isPending}
            >
              {addCasesMutation.isPending 
                ? "Adding Cases..." 
                : `Add ${selectedCases.length} Cases`}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Select Test Suite Dialog */}
      <Dialog open={selectSuiteDialogOpen} onOpenChange={setSelectSuiteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add Test Suite to Cycle</DialogTitle>
            <DialogDescription>
              Select a test suite to add all its test cases to the current cycle.
            </DialogDescription>
          </DialogHeader>
          
          <div className="max-h-[400px] overflow-y-auto">
            {isLoadingSuites ? (
              <div className="text-center py-8">Loading test suites...</div>
            ) : testSuites && testSuites.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-12">
                      <span className="sr-only">Select</span>
                    </TableHead>
                    <TableHead>Name</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Priority</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {testSuites.map((suite) => (
                    <TableRow key={suite.id}>
                      <TableCell>
                        <input
                          type="radio"
                          className="w-4 h-4"
                          checked={selectedSuiteId === suite.id}
                          onChange={() => setSelectedSuiteId(suite.id)}
                        />
                      </TableCell>
                      <TableCell className="font-medium">{suite.name}</TableCell>
                      <TableCell>{suite.description}</TableCell>
                      <TableCell>
                        <StatusBadge variant={
                          suite.status === "active" ? "success" :
                          suite.status === "draft" ? "muted" : "warning"
                        }>
                          {suite.status.charAt(0).toUpperCase() + suite.status.slice(1)}
                        </StatusBadge>
                      </TableCell>
                      <TableCell>
                        <StatusBadge variant={
                          suite.priority === "high" ? "danger" :
                          suite.priority === "medium" ? "warning" : "muted"
                        }>
                          {suite.priority.charAt(0).toUpperCase() + suite.priority.slice(1)}
                        </StatusBadge>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                No test suites available to add.
              </div>
            )}
          </div>
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setSelectSuiteDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button
              onClick={handleAddSuite}
              disabled={!selectedSuiteId || addSuiteMutation.isPending}
            >
              {addSuiteMutation.isPending 
                ? "Adding Suite..." 
                : "Add Test Suite"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Execute Test Dialog */}
      <Dialog open={testRunDialogOpen} onOpenChange={setTestRunDialogOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Execute Test</DialogTitle>
            <DialogDescription>
              {selectedCycleItem && getTestCaseDetails(selectedCycleItem.testCaseId)?.title}
            </DialogDescription>
          </DialogHeader>
          
          {selectedCycleItem && (
            <div className="space-y-6">
              {/* Test case information section */}
              <div className="bg-atmf-card rounded-lg p-4">
                <h3 className="text-lg font-medium mb-3">Test Case Details</h3>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <div className="text-sm text-muted-foreground">ID</div>
                    <div className="font-mono">{selectedCycleItem.testCaseId}</div>
                  </div>
                  <div>
                    <div className="text-sm text-muted-foreground">Current Status</div>
                    <div>{renderStatusBadge(selectedCycleItem.status)}</div>
                  </div>
                  
                  {/* Test case details */}
                  {getTestCaseDetails(selectedCycleItem.testCaseId) && (
                    <>
                      <div className="col-span-2">
                        <div className="text-sm text-muted-foreground">Description</div>
                        <div className="mt-1">
                          {getTestCaseDetails(selectedCycleItem.testCaseId)?.description || "No description available"}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground">Priority</div>
                        <div className="mt-1">
                          <StatusBadge variant={
                            getTestCaseDetails(selectedCycleItem.testCaseId)?.priority === "high" ? "danger" :
                            getTestCaseDetails(selectedCycleItem.testCaseId)?.priority === "medium" ? "warning" : "muted"
                          }>
                            {getTestCaseDetails(selectedCycleItem.testCaseId)?.priority?.charAt(0).toUpperCase() + 
                              getTestCaseDetails(selectedCycleItem.testCaseId)?.priority?.slice(1) || "Unknown"}
                          </StatusBadge>
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-muted-foreground">Severity</div>
                        <div className="mt-1">
                          <StatusBadge variant={
                            getTestCaseDetails(selectedCycleItem.testCaseId)?.severity === "critical" ? "danger" :
                            getTestCaseDetails(selectedCycleItem.testCaseId)?.severity === "major" ? "warning" :
                            getTestCaseDetails(selectedCycleItem.testCaseId)?.severity === "minor" ? "muted" : "default"
                          }>
                            {getTestCaseDetails(selectedCycleItem.testCaseId)?.severity?.charAt(0).toUpperCase() + 
                              getTestCaseDetails(selectedCycleItem.testCaseId)?.severity?.slice(1) || "Unknown"}
                          </StatusBadge>
                        </div>
                      </div>
                    </>
                  )}
                </div>
              </div>
              
              {/* Test steps section */}
              <div className="bg-atmf-card rounded-lg p-4">
                <h3 className="text-lg font-medium mb-3">Test Steps</h3>
                {getTestCaseDetails(selectedCycleItem.testCaseId)?.steps ? (
                  <div className="space-y-3">
                    {(() => {
                      try {
                        // Try to parse as JSON if it's a string
                        const steps = typeof getTestCaseDetails(selectedCycleItem.testCaseId)?.steps === 'string' 
                          ? JSON.parse(getTestCaseDetails(selectedCycleItem.testCaseId)?.steps as string) 
                          : getTestCaseDetails(selectedCycleItem.testCaseId)?.steps || [];
                        
                        return Array.isArray(steps) ? steps.map((step: any, index: number) => (
                          <div key={index} className="border-b pb-3 last:border-b-0">
                            <div className="flex gap-2">
                              <div className="min-w-[25px] h-6 flex items-center justify-center rounded-full bg-atmf-badge text-xs">
                                {index + 1}
                              </div>
                              <div>
                                <div className="font-medium">{step.step || step.action || step.description || "Step " + (index + 1)}</div>
                                {step.expected && (
                                  <div className="text-sm text-muted-foreground mt-1">
                                    <span className="font-medium text-primary">Expected:</span> {step.expected}
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                        )) : (
                          <div className="text-muted-foreground">Steps data format not recognized</div>
                        );
                      } catch (error) {
                        console.error("Failed to parse steps:", error);
                        return <div className="text-muted-foreground">Unable to display steps</div>;
                      }
                    })()}
                  </div>
                ) : (
                  <div className="text-muted-foreground">No test steps available</div>
                )}
              </div>
              
              {/* Previous runs section */}
              <div className="bg-atmf-card rounded-lg p-4">
                <h3 className="text-lg font-medium mb-3">Previous Runs</h3>
                {isLoadingHistory ? (
                  <div className="text-center py-4">Loading previous runs...</div>
                ) : testRunHistory && testRunHistory.length > 0 ? (
                  <div className="space-y-3 max-h-[200px] overflow-y-auto">
                    {testRunHistory.map((run) => (
                      <div key={run.id} className="flex items-center justify-between border-b pb-2 last:border-b-0">
                        <div className="flex items-center gap-3">
                          {renderStatusBadge(run.status)}
                          <span className="text-sm">
                            {run.cycleName ? `${run.cycleName} - ` : ''}{run.executedAt ? new Date(run.executedAt).toLocaleString() : 'Unknown date'}
                          </span>
                        </div>
                        <div className="text-sm text-muted-foreground">{run.notes}</div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-muted-foreground">No previous runs</div>
                )}
              </div>
              
              {/* Test notes section */}
              <div className="p-4 bg-atmf-card rounded-lg">
                <h3 className="text-lg font-medium mb-3">Test Run Notes</h3>
                <Textarea 
                  value={testRunNotes}
                  onChange={(e) => setTestRunNotes(e.target.value)}
                  placeholder="Add any notes, observations, or issues found during test execution..."
                  className="min-h-[100px]"
                />
              </div>

              {/* Test execution buttons section */}
              <div className="p-4 bg-atmf-card rounded-lg">
                <h3 className="text-lg font-medium mb-3">Update Test Status</h3>
                <div className="grid grid-cols-2 gap-4 md:grid-cols-4">
                  <Button
                    variant="outline"
                    className="flex-col h-auto py-4 border-green-500/20 hover:bg-green-500/10"
                    onClick={() => handleRunTest("pass")}
                  >
                    <Check className="h-8 w-8 mb-2 text-green-500" />
                    <span>Pass</span>
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="flex-col h-auto py-4 border-red-500/20 hover:bg-red-500/10"
                    onClick={() => handleRunTest("fail")}
                  >
                    <X className="h-8 w-8 mb-2 text-red-500" />
                    <span>Fail</span>
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="flex-col h-auto py-4 border-yellow-500/20 hover:bg-yellow-500/10"
                    onClick={() => handleRunTest("skip")}
                  >
                    <SkipForward className="h-8 w-8 mb-2 text-yellow-500" />
                    <span>Skip</span>
                  </Button>
                  
                  <Button
                    variant="outline"
                    className="flex-col h-auto py-4 border-orange-500/20 hover:bg-orange-500/10"
                    onClick={() => handleRunTest("blocked")}
                  >
                    <AlertCircle className="h-8 w-8 mb-2 text-orange-500" />
                    <span>Blocked</span>
                  </Button>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter className="mt-4">
            <Button variant="ghost" onClick={() => setTestRunDialogOpen(false)}>
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Test Run History Dialog */}
      <Dialog open={historyDialogOpen} onOpenChange={setHistoryDialogOpen}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Test Run History</DialogTitle>
            <DialogDescription>
              {selectedTestCaseId ? 
                `Viewing all test runs for test case #${selectedTestCaseId} across all cycles.` : 
                "Select a test case to view its history."}
            </DialogDescription>
          </DialogHeader>
          
          <div className="max-h-[500px] overflow-y-auto mt-2">
            {isLoadingHistory ? (
              <div className="text-center py-8">Loading test run history...</div>
            ) : testRunHistory && testRunHistory.length > 0 ? (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Cycle</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Notes</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {testRunHistory.map((run) => (
                    <TableRow key={run.id}>
                      <TableCell>{run.cycleName || `Cycle #${run.cycleId || 'Unknown'}`}</TableCell>
                      <TableCell>{run.executedAt ? new Date(run.executedAt).toLocaleString() : 'Unknown date'}</TableCell>
                      <TableCell>{renderStatusBadge(run.status)}</TableCell>
                      <TableCell className="max-w-xs truncate">{run.notes || "-"}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                No previous test runs found for this test case.
              </div>
            )}
          </div>
          
          <DialogFooter>
            <Button onClick={() => setHistoryDialogOpen(false)}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </PageContainer>
  );
}