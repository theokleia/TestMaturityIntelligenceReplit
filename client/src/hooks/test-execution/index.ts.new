// Re-export types
export * from './types';

// Re-export hooks
export { useTestCycles } from './useTestCycles';
export { useCreateTestCycle } from './useCreateTestCycle';
export { useUpdateTestCycle } from './useUpdateTestCycle';
export { useTestCycleItems } from './useTestCycleItems';
export { useAddTestCasesToCycle } from './useAddTestCasesToCycle';
export { useAddTestSuiteToCycle } from './useAddTestSuiteToCycle';

// Add the remaining hooks from the original file (these will be moved to separate files later)
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient, apiRequest } from "@/lib/queryClient";
import type { TestCycleItem, TestRun } from "./types";

// Remove Test Cycle Item from Cycle
export function useRemoveTestCaseFromCycle() {
  return useMutation<boolean, Error, { id: number }>({
    mutationFn: async ({ id }) => {
      const result = await apiRequest<boolean>(`/api/test-cycle-items/${id}`, {
        method: 'DELETE',
      });
      return result;
    },
    onSuccess: () => {
      // We don't know which cycle this item belonged to, so invalidate all test cycle items
      queryClient.invalidateQueries({ queryKey: ['/api/test-cycle-items'] });
    },
  });
}

// Update Test Cycle Item
export function useUpdateTestCycleItem() {
  return useMutation<TestCycleItem, Error, { id: number; data: Partial<TestCycleItem> }>({
    mutationFn: async ({ id, data }) => {
      const result = await apiRequest<TestCycleItem>(`/api/test-cycle-items/${id}`, {
        method: 'PATCH',
        body: JSON.stringify(data),
      });
      return result;
    },
    onSuccess: (_, { id }) => {
      // Invalidate specific test cycle item and all items (since we don't know which cycle this belongs to)
      queryClient.invalidateQueries({ queryKey: [`/api/test-cycle-items/${id}`] });
      queryClient.invalidateQueries({ queryKey: ['/api/test-cycle-items'] });
    },
  });
}

// Test Runs
export function useTestRuns(cycleItemId?: number) {
  return useQuery<TestRun[]>({
    queryKey: cycleItemId ? [`/api/test-runs/by-cycle-item/${cycleItemId}`] : undefined,
    enabled: !!cycleItemId,
  });
}

export function useTestRunsByTestCase(testCaseId?: number) {
  return useQuery<TestRun[]>({
    queryKey: testCaseId ? [`/api/test-runs/by-test-case/${testCaseId}`] : undefined,
    enabled: !!testCaseId,
  });
}

export function useCreateTestRun() {
  return useMutation<TestRun, Error, { cycleItemId: number; testCaseId: number; status: string; notes: string; steps: any }>({
    mutationFn: async (data) => {
      const result = await apiRequest<TestRun>('/api/test-runs', {
        method: 'POST',
        body: JSON.stringify(data),
      });
      return result;
    },
    onSuccess: (_, { cycleItemId, testCaseId }) => {
      // Invalidate test runs for both the cycle item and test case
      queryClient.invalidateQueries({ queryKey: [`/api/test-runs/by-cycle-item/${cycleItemId}`] });
      queryClient.invalidateQueries({ queryKey: [`/api/test-runs/by-test-case/${testCaseId}`] });
    },
  });
}